{"version":3,"file":"src_app_berserk-t1-reader_berserk-t1-reader_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEQ;AAE/D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wEAAmB;KAC/B;CACF,CAAC;IAMW,gCAAgC,SAAhC,gCAAgC;CAAG;AAAnC,gCAAgC;IAJ5C,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,gCAAgC,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBJ;AACM;AACF;AAEA;AAEyC;AAEvB;IAWlD,yBAAyB,SAAzB,yBAAyB;CAAG;AAA5B,yBAAyB;IATrC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,+FAAgC;SACjC;QACD,YAAY,EAAE,CAAC,wEAAmB,CAAC;KACpC,CAAC;GACW,yBAAyB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACnBY;AACwC;IAQ7E,mBAAmB,SAAnB,mBAAmB;IAK9B,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;QAClC,IAAI,CAAC,MAAM,GAAC,EAAE,CAAC;IAChB,CAAC;IAEF,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAQD,YAAY,CAAC,MAAU;QACrB,MAAM,IAAI,GAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,MAAM,MAAM,GAAG,0DAAG,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAChE,kEAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAE3F,CAAC;IAED,WAAW;QACT,MAAM,WAAW,GAAE,0DAAG,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QACvD,8DAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAM,IAAI,IAAE;YACpC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,MAAM,GAAC,EAAE,CAAC;YACf,KAAI,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAC;gBACzB,MAAM,GAAG,GAAG,MAAM,qEAAc,CAAC,IAAI,CAAC,CAAC;gBACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;QAEH,CAAC,EAAC,CAAC,KAAK,CAAC,GAAG,GAAE,GAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC;IACpC,CAAC;CAEF;;YAjDY,0DAAO;;AAQP,mBAAmB;IAL/B,wDAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,8EAA4C;;KAE7C,CAAC;GACW,mBAAmB,CAyC/B;AAzC+B","sources":["./src/app/berserk-t1-reader/berserk-t1-reader-routing.module.ts","./src/app/berserk-t1-reader/berserk-t1-reader.module.ts","./src/app/berserk-t1-reader/berserk-t1-reader.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { BerserkT1ReaderPage } from './berserk-t1-reader.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BerserkT1ReaderPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BerserkT1ReaderPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { BerserkT1ReaderPageRoutingModule } from './berserk-t1-reader-routing.module';\r\n\r\nimport { BerserkT1ReaderPage } from './berserk-t1-reader.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    BerserkT1ReaderPageRoutingModule\r\n  ],\r\n  declarations: [BerserkT1ReaderPage]\r\n})\r\nexport class BerserkT1ReaderPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ref, Storage, uploadBytes, listAll, getDownloadURL } from '@angular/fire/storage';\r\nimport { orderBy, query } from 'firebase/firestore';\r\n\r\n@Component({\r\n  selector: 'app-berserk-t1-reader',\r\n  templateUrl: './berserk-t1-reader.page.html',\r\n  styleUrls: ['./berserk-t1-reader.page.scss'],\r\n})\r\nexport class BerserkT1ReaderPage {\r\n  \r\n\r\n  images:string[];\r\n\r\n  constructor(private storage: Storage){\r\n    this.images=[];\r\n   }\r\n\r\n  ngOnInit(){\r\n    this.getImagenes();\r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n \r\n\r\n  cargarImagen($event:any){\r\n    const file =$event.target.files[0];\r\n    console.log(file);\r\n\r\n    const imgRef = ref(this.storage, `Mangas/Berserk/${file.name}`);\r\n    uploadBytes(imgRef, file).then(resp => console.log(resp)).catch(err => console.log(err));\r\n\r\n  }\r\n\r\n  getImagenes(){\r\n    const imagenesRef= ref(this.storage, 'Mangas/Berserk');\r\n    listAll(imagenesRef).then(async resp=>{\r\n      console.log(resp);\r\n      this.images=[];\r\n      for(let item of resp.items){\r\n        const url = await getDownloadURL(item);\r\n        this.images.push(url);\r\n      }\r\n    \r\n    }).catch(err=>{console.log(err)});\r\n  }\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}